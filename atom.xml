<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>栀子花开</title>
  <subtitle>那一年盛夏的栀子花开</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-03T08:00:34.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>jsonqiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo入门</title>
    <link href="http://yoursite.com/2016/08/03/hexo_index/"/>
    <id>http://yoursite.com/2016/08/03/hexo_index/</id>
    <published>2016-08-03T08:00:34.000Z</published>
    <updated>2016-08-03T08:00:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式之策略模式</title>
    <link href="http://yoursite.com/2014/11/12/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2014/11/12/策略模式/</id>
    <published>2014-11-12T14:17:07.000Z</published>
    <updated>2016-08-03T09:17:00.000Z</updated>
    
    <content type="html"><![CDATA[<pre class="lang:default decode:true">设计模式是编程经验、是对OO设计准则的良好编程实践。灵活运用是重点，切忌生搬硬套。</pre>
&nbsp;

##### 开始之前

        约翰逊说过伟大的作品不是靠力量,而是靠坚持来完成的，所以做事贵乎恒。博客搭建完成后，自己又很久没有写博客了，果然自己是个三分钟热情的人啊……

        为了改变自己这种惰性，先强迫自己写一个设计模式的系列文章吧，回到今天的主题策略模式。

##### 策略模式定义

        原文：The Strategy Pattern defines a family of algorithms,encapsulates each one,and makes them interchangeable. Strategy lets the algorithm vary independently from clients that use it.

        翻译：策略模式定义一个算法集，并将每个算法封装，使其可以相互替换，让算法的变化独立于使用算法的客户端。

##### 策略模式UML

[![策略模式](http://www.jsonqiao.com/json/wp-content/uploads/2014/11/策略模式.png "策略模式UML")](http://www.jsonqiao.com/json/wp-content/uploads/2014/11/策略模式.png)

#####  应用场景

        从策略模式的定义及上面的UML可以看出，策略模式的重点是将系统中易于变化的算法抽离成独立的部分，让其变化独立与于使用该算法的上下文环境，所以策略模式的<span style="color: #ff6600">重点作用是分离系统中变化与不变的部分，其实这是系统设计时我们遵循的一大原则。</span>

##### OO设计准则

1.  封装变化
2.  多用组合少用继承（Favor composition over inheritance）
3.  针对接口编程而不是实现

##### 示例代码

<pre lang="java" line="1">package com.jsonqiao.strategy;

/**
 * 策略模式的策略接口
 *
 * Created by json_qiao on 2014/11/4.
 */
public interface Strategy {

 /**
 * 策略方法
 *
 * @return
 */
 public String doStrategy();
}

package com.jsonqiao.strategy;

/**
 * 具体的算法策略
 *
 * Created by json_qiao on 2014/11/4.
 */
public class DefaultStrategy implements Strategy {

    @Override
    public String doStrategy() {
        return "This is the default strategy";
    }
}

package com.jsonqiao.strategy;

/**
 * 调用策略的上下文
 * 
 * &lt;p&gt;策略模式遵循的原则是将变化部分与不变部分分离，将变化的部分封装成良好的接口提供给上下文环境&lt;/p&gt;
 * 
 * Created by json_qiao on 2014/11/4.
 */
public class Context {

 private Strategy strategy;

 public void callStrategy() {
 //不同的部分用策略进行封装
 String strategyResult = strategy.doStrategy();
 System.out.println(strategyResult);
 //做相同的处理
 doSomethingInCommon();
 }

 public void setStrategy(Strategy strategy) {
 this.strategy = strategy;
 }

 private void doSomethingInCommon() {
 System.out.println("I'll do something in common after calling the strategy...");
 }

 public static void main(String[] args) {
 Context context = new Context();
 context.setStrategy(new DefaultStrategy());
 context.callStrategy();
 }

}</pre>

<h5 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h5><pre><code>策略模式是一种简单、常用的设计模式，在我们做OO设计时，一旦我们涉及到抽象封装，基本上都可以看成是在使用策略模式。在WEB开发中的MVC分层模式、ISO网络的分层架构中，其实都是基于策略模式的精髓-&lt;span style=&quot;color: #ff9900;&quot;&gt;将变化分离，让变化独立于使用变化的上下文环境。&lt;/span&gt;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre class=&quot;lang:default decode:true&quot;&gt;设计模式是编程经验、是对OO设计准则的良好编程实践。灵活运用是重点，切忌生搬硬套。&lt;/pre&gt;
&amp;nbsp;

##### 开始之前

        约翰逊说过伟大的作品不是靠力量,而是靠坚持来完成的，
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
</feed>
